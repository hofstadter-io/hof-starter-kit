type User {
  id: Int!
  username: String!
  role: String!
  isActive: Boolean
  email: String!
  auth: UserAuth
}

# Additional authentication service info
type UserAuth {
  apikey: ApikeyAuth
  certificate: CertificateAuth
  facebook: FacebookAuth
  google: GoogleAuth
  github: GithubAuth
  linkedin: LinkedInAuth
}

type ApikeyAuth {
  apikey: String
}

type CertificateAuth {
  serial: String
}

type FacebookAuth {
  fbId: String
  displayName: String
}

type GoogleAuth {
  googleId: String
  displayName: String
}

type GithubAuth {
  ghId: String
  displayName: String
}

type LinkedInAuth {
  lnId: String
  displayName: String
}

extend type Query {
  # Get all users ordered by: OrderByUserInput add filtered by: FilterUserInput
  users(orderBy: OrderByUserInput, filter: FilterUserInput): [User]
  # Get user by id
  user(id: Int!): UserPayload
  # Get current user
  currentUser: User
}

type UserPayload {
  user: User
  errors: [FieldError!]
}

extend type Mutation {
  # Create new user
  addUser(input: AddUserInput!): UserPayload!
  # Edit a user
  editUser(input: EditUserInput!): UserPayload!
  # Delete a user
  deleteUser(id: Int!): UserPayload!

  generateApikey(id: Int!): UserPayload!
}

# Input for ordering users
input OrderByUserInput {
  # id | username | role | isActive | email
  column: String
  # asc | desc
  order: String
}

# Input for filtering users
input FilterUserInput {
  # search by username or email
  searchText: String
  # filter by role
  role: String
  # filter by isActive
  isActive: Boolean
}

# Additional authentication service info
input AuthInput {
  apikey: AuthApikeyInput
  certificate: AuthCertificateInput
  facebook: AuthFacebookInput
  google: AuthGoogleInput
  github: AuthGitHubInput
  linkedin: AuthLinkedInInput
}

input AuthApikeyInput {
  apikey: String
}

input AuthCertificateInput {
  serial: String
}

input AuthFacebookInput {
  fbId: String
  displayName: String
}

input AuthGoogleInput {
  googleId: String
  displayName: String
}

input AuthGitHubInput {
  ghId: String
  displayName: String
}

input AuthLinkedInInput {
  lnId: String
  displayName: String
}

# Input for addUser Mutation
input AddUserInput {
  username: String!
  email: String!
  password: String!
  role: String!
  isActive: Boolean
  auth: AuthInput
}

# Input for editUser Mutation
input EditUserInput {
  id: Int!
  username: String!
  role: String!
  isActive: Boolean
  email: String!
  password: String
  auth: AuthInput
}

extend type Subscription {
  # Subscription for users list
  usersUpdated(filter: FilterUserInput): UpdateUserPayload
}

# Payload for usersUpdated Subscription
type UpdateUserPayload {
  mutation: String!
  node: User!
}
