{{#with DslContext as |TYPE|}}
{{#with (camelT TYPE.name) as |TypeName|}}
{{#with (camel  TYPE.name) as |typeName|}}

{{#each TYPE.relations as |RELATION|}}
{{#gettype RELATION.type true}}{{#with . as |REL_TYPE|}}
#import "../../../{{kebab REL_TYPE.name}}/graphql/fragments/type-solo.graphql"
{{/with}}{{/gettype}}
{{/each}}

fragment {{TypeName}}InfoNested on {{TypeName}} {
  id

  createdAt
  updatedAt

  {{#each TYPE.fields as |FIELD|}}
  {{camel FIELD.name}}
  {{/each}}

  {{#if TYPE.visibility}}
  {{#if TYPE.visibility.public}}{{TYPE.visibility.public}}{{else}}isPublic{{/if}}
  {{/if}}

  {{#if TYPE.owned}}
  {{TYPE.owned.name}}Id
  {{TYPE.owned.name}}{
    id
    username
    email
  }
  {{/if}}

  {{#each TYPE.relations as |RELATION|}}
  {{#gettype RELATION.type true}}{{#with . as |REL_TYPE|}}
  {{camel RELATION.name}} {
    ...{{camelT REL_TYPE.name}}Info
  }
  {{/with}}{{/gettype}}
  {{/each}}

}

{{/with}}
{{/with}}
{{/with}}

